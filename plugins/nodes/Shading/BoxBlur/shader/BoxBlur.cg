/**************************************************************************************
**                                                                                   **
**                                    VS     										 **
**                                                                                   **
***************************************************************************************/

void quad_vs( in  float4 iPosition : POSITION,
				   //in  float2 iTexCoord : TEXCOORD0,
                   out float4 oPosition : POSITION,
				   out float2 oTexCoord : TEXCOORD0,
			       uniform float4x4 worldViewProj)
{
    // Use standardise transform, so work accord with render system specific (RS depth, requires texture flipping, etc)
    oPosition = mul(worldViewProj, iPosition);

    // The input positions adjusted by texel offsets, so clean up inaccuracies
    iPosition.xy = sign(iPosition.xy);
	
    // Convert to image-space
    oTexCoord = (float2(iPosition.x, -iPosition.y) + 1.0f) * 0.5f; //iTexCoord; <- is also possible
}

/**************************************************************************************
**                                                                                   **
**                                       FS                                          **
**                                                                                   **
***************************************************************************************/


//////////////
// Box Blur //
//////////////

void boxBlur_ps( in  float2 texCoord : TEXCOORD0,
			  out float4 color    : COLOR,
			  uniform float blurDistance,
			  uniform sampler2D inputMap0 : TEXUNIT0)
{
	float4 blurColor  = tex2D(inputMap0, float2(texCoord.x + blurDistance, texCoord.y + blurDistance));
	blurColor  += tex2Dlod(inputMap0, float4(texCoord.x - blurDistance, texCoord.y - blurDistance, 0, 0));
	blurColor  += tex2Dlod(inputMap0, float4(texCoord.x + blurDistance, texCoord.y - blurDistance, 0, 0));
	blurColor  += tex2Dlod(inputMap0, float4(texCoord.x - blurDistance, texCoord.y + blurDistance, 0, 0));

	color = blurColor / 4.0;
}