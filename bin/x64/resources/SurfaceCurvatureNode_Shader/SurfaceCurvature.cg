/*
-----------------------------------------------------------------------------
This source file is part of FRAPPER
research.animationsinstitut.de
sourceforge.net/projects/frapper

Copyright (c) 2008-2014 Filmakademie Baden-Wuerttemberg, Institute of Animation 

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; version 2.1 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
-----------------------------------------------------------------------------
*/

/**************************************************************************************
**                                                                                   **
**                                    ssao_Quad_vs                                   **
**                                                                                   **
***************************************************************************************/

void lsd_quad_vs( in  float4 iPosition : POSITION,
				   out float4 oPosition : POSITION,
				   out float2 oTexCoord : TEXCOORD0,
			       uniform float4x4 worldViewProj)
{
    // Use standardise transform, so work accord with render system specific (RS depth, requires texture flipping, etc)
    oPosition = mul(worldViewProj, iPosition);

    // The input positions adjusted by texel offsets, so clean up inaccuracies
    iPosition.xy = sign(iPosition.xy);
	
    // Convert to image-space
    oTexCoord = (float2(iPosition.x, -iPosition.y) + 1.0f) * 0.5f; //iTexCoord; würde auch funktionieren
}


/**************************************************************************************
**                                                                                   **
**                                      TEX2DLOD                                     **
**             For ps_3_0, we want to use tex2Dlod because it's faster               **
***************************************************************************************/

ps_3_0 float4 TEX2DLOD(sampler2D map, float2 uv)
{
    return tex2Dlod(map, float4(uv.xy, 0, 0));
}

float4 TEX2DLOD(sampler2D map, float2 uv)
{
    return tex2D(map, uv);
}


/**************************************************************************************
**                                                                                   **
**                                       lsd_ps                                      **
**                                                                                   **
***************************************************************************************/

float tanh(in float val, float cmax)
{
    static const float tanhmax = 3.11622;
	const float x = (val * cmax)/tanhmax;
	const float e = exp(-2.0*x);
		
	return clamp((1.0-e)/(1.0+e),-1.0,1.0);
}

float3 hsvToRgb(in float h,in float s,in float v) {
  float3 rgb;
  const int hi = int(floor(h/60.0))%6;
  const float f = h/60.0 - floor(h/60.0);
  const float p = v*(1.0-s);
  const float q = v*(1.0-f*s);
  const float t = v*(1.0-(1.0-f)*s);
  
  if(hi==0) rgb = float3(v,t,p);
  else if(hi==1) rgb = float3(q,v,p);
  else if(hi==2) rgb = float3(p,v,t);
  else if(hi==3) rgb = float3(p,q,v);
  else if(hi==4) rgb = float3(t,p,v);
  else rgb = float3(v,p,q);
  
  return rgb;
}

float4 HSVdescriptor(in float3 hessian, float cmax) {
  const float meanCurv = -(hessian.x+hessian.y)/2.0;
  const float h = tanh(meanCurv, cmax);
  
  static const float caL = 180.0;
  static const float caR = 250.0;
  static const float cvL = 40.0;
  static const float cvR = 0.0;
  static const float s0  = 0.75;

    
  const float S = s0;
  const float V = 1.0;

  float H;

  if(h<0.0)
    H = lerp(caL,caR,-h);
  else
    H = lerp(cvL,cvR,h);

  float3 rgb = hsvToRgb(H,S,V);
  float3 pla = float3(0.95);
  
  float cmin=0.01;
  if(meanCurv<0.0) {
    float a = 1.0-smoothstep(0.0,cmin*10.0,-meanCurv);
    rgb    =  lerp(rgb,pla,a);
  } else if(meanCurv>0.0) {
    float a = 1.0-smoothstep(0.0,cmin*10.0,meanCurv);
    rgb    = lerp(rgb,pla,a);
  } else {
    rgb = pla;
  }
  
  return float4(rgb,1.0);
} 


float3 hessian( in float2 texCoord,
				in float width,
			    in float height,
				in sampler2D inputMap)
{
		
  const float sw = 1.0/width;
  const float sh = 1.0/height;
  
  const float2 A = tex2D(inputMap,float2(texCoord.x-sw,texCoord.y+sh)).xy;
  const float2 B = tex2D(inputMap,float2(texCoord.x,texCoord.y+sh)).xy;
  const float2 C = tex2D(inputMap,float2(texCoord.x+sw,texCoord.y+sh)).xy;
  const float2 D = tex2D(inputMap,float2(texCoord.x-sw,texCoord.y)).xy;
  const float2 E = tex2D(inputMap,float2(texCoord.x+sw,texCoord.y)).xy;
  const float2 F = tex2D(inputMap,float2(texCoord.x-sw,texCoord.y-sh)).xy;
  const float2 G = tex2D(inputMap,float2(texCoord.x,texCoord.y-sh)).xy;
  const float2 H = tex2D(inputMap,float2(texCoord.x+sw,texCoord.y-sh)).xy;
  
  const float xx = 2.0*E.x-2.0*D.x+C.x-A.x+H.x-F.x;
  const float xy = 2.0*E.y-2.0*D.y+C.y-A.y+H.y-F.y;
  const float yx = -2.0*B.x+2.0*G.x-A.x+F.x-C.x+H.x;
  const float yy = -2.0*B.y+2.0*G.y-A.y+F.y-C.y+H.y;
		
  return float3(xx,yy,(xy+yx)/2.0); 
}

void lsd_ps( in  float2 texCoord : TEXCOORD0,
			  out float4 color    : COLOR,
			  uniform float width,
			  uniform float height,
			  uniform float cmax,
			  uniform float flatning,
			  uniform float hsv,
			  uniform sampler2D inputMap : TEXUNIT0)
{
    // LSD ;-)
	float3 h = hessian(texCoord, width, height, inputMap);
	if (length(h) < cmax)
		h = float3(0.0, 0.0, 0.0);
	
	if ((bool) hsv)
		color = float4(HSVdescriptor(h, cmax).xyz, 1.0);
	else
		color = float4(h, 1.0);
}