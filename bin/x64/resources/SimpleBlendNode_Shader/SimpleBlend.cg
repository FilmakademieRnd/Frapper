/*
-----------------------------------------------------------------------------
This source file is part of FRAPPER
research.animationsinstitut.de
sourceforge.net/projects/frapper

Copyright (c) 2008-2014 Filmakademie Baden-Wuerttemberg, Institute of Animation 

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; version 2.1 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
-----------------------------------------------------------------------------
*/

/***************************************************************************************
 **                                                                                   **
 **                                    Quad_vs                                        **
 **                                                                                   **
 ***************************************************************************************/

void sb_vs(	in float4 iPosition : POSITION,
				in float2 iTexCoord : TEXCOORD0,
				out float4 oPosition : POSITION,
				out float2 texCoord : TEXCOORD0,
				uniform float3x3 transformMatrix,
				uniform float4x4 worldViewProj)
{  
   oPosition = mul(worldViewProj, iPosition);
   texCoord = iTexCoord; 
}

/**************************************************************************************
**                                                                                   **
**                                       sb_ps                                      **
**                                                                                   **
***************************************************************************************/



void sb_ps( in  float2 texCoord : TEXCOORD0,
			  out float4 color    : COLOR,
			  uniform float op,
			  uniform float blendFactor,
			  uniform sampler2D inputMap0 : TEXUNIT0,
			  uniform sampler2D inputMap1 : TEXUNIT1)
{
	float4 colorSample0 = tex2Dlod(inputMap0, float4(texCoord, 0, 0));
	float4 colorSample1 = tex2Dlod(inputMap1, float4(texCoord, 0, 0));
	color = float4(1.0f);
	
	if (op == 0) {
		//Add
		color.rgb = lerp(colorSample0.rgb, colorSample1.rgb, blendFactor);
	}
	else if (op == 1) {
		//Mul
		float3 color1 = colorSample0.rgb;
		float3 color2 = colorSample0.rgb * colorSample1.rgb;
		color.rgb = lerp(color1, color2, blendFactor);
		color.a = 1.0f;
	}
	else if (op == 2) {
		//A over B
        float4 src = colorSample0;
        float4 dst = colorSample1;
        float alpha = src.a*blendFactor;
        color = alpha*src + (1.0f-alpha)*dst;
	}
	else if (op == 3) {
		//Stencil
		float3 color2 = colorSample1.rgb;
		float alpha1 = colorSample0.a;
		color.rgb =  color2 * alpha1;
		color.a = alpha1;
	}
	else if (op == 4) {
		//MultiplyWithAlpha
		float3 color1 = colorSample0.rgb;
		float alpha1 = colorSample0.a;
		color.rgb =  color1 * alpha1;
		color.a = 1.0f;
	}
	else if (op == 5) {
		//BlendWithAlpha
		float3 color1 = colorSample0.rgb;
		float3 color2 = colorSample1.rgb;
		float alpha1 = colorSample0.a;
		float alpha2 = colorSample1.a;
		color.rgb =  color1/**alpha1*/ * (1.0f-blendFactor) + color2/**alpha2*/ * blendFactor;
		color.a = alpha1 * (1.0f-blendFactor) + alpha2 * blendFactor;
	}	
	else if (op == 6) {
		//Show alpha
		float3 color1 = colorSample0.rgb;
		float alpha1 = colorSample0.a;
		color.rgb =  float3(1.0f,1.0f,1.0f) * alpha1;
		color.a = 1.0f;
	}
	else if (op == 7) {
		//Invert alpha
		float3 color1 = colorSample0.rgb;
		float alpha1 = colorSample0.a;
		color.rgb =  color1;
		color.a = 1.0f-alpha1;
	}
	else if (op == 8) {
		//PassThrough
		float3 color1 = colorSample0.rgb;
		float alpha1 = colorSample0.a;
		color.rgb =  color1;
		color.a = alpha1;
	}	
    else if (op == 9) {
		//B over A
        float4 src = colorSample1;
        float4 dst = colorSample0;
        float alpha = src.a*blendFactor;
        color = alpha*src + (1.0f-alpha)*dst;
	}
}