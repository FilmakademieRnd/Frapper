/*
-----------------------------------------------------------------------------
This source file is part of FRAPPER
research.animationsinstitut.de
sourceforge.net/projects/frapper

Copyright (c) 2008-2014 Filmakademie Baden-Wuerttemberg, Institute of Animation 

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; version 2.1 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
-----------------------------------------------------------------------------
*/

////////////////////
// add. functions //
////////////////////

half2 btex2D_rg(sampler2D map, float2 uv, half radius, half2 offset, half size) 
{
	// this is sometimes too slow and long
	// (3 * 2 + 1) ^ 2 =  7 ^ 2 = 49 samples
	const half2 o = offset * size;
	half2 sample = half2(0, 0);
	for (int x = -radius; x <= radius; x++) {
		for (int y = -radius; y <= radius; y++) {
			sample += tex2D(map, half2(uv.x + x * o.x, uv.y + y * o.y)).ra;
		}
	}
	return sample / ((radius * 2 + 1) * (radius * 2 + 1));

	// simple 3x3 filter
	//float2 o = offset * size;
	//float2 c = tex2D(map, uv.xy).rg; // center
	//c += tex2D(map, uv.xy - o.xy).rg; // top left
	//c += tex2D(map, uv.xy + o.xy).rg; // bottom right
	//c += tex2D(map, float2(uv.x - o.x, uv.y)).rg; // left
	//c += tex2D(map, float2(uv.x + o.x, uv.y)).rg; // right
	//c += tex2D(map, float2(uv.x, uv.y + o.y)).rg; // bottom
	//c += tex2D(map, float2(uv.x, uv.y - o.y)).rg; // top
	//c += tex2D(map, float2(uv.x - o.x, uv.y + o.y)).rg; // bottom left
	//c += tex2D(map, float2(uv.x + o.x, uv.y - o.y)).rg; // top right
	//return c / 9;
}

half shadow(sampler2D shadowMap, half4 shadowMapPos, half radius, half2 offset, half size) 
{
	const half2 suv = shadowMapPos.xy / shadowMapPos.w;

	// sharp texture read
	//float2 moments = tex2D(shadowMap, suv).rg;

	// blurred texture read
	const half2 moments = btex2D_rg(shadowMap, suv, radius, offset, size);

	return (shadowMapPos.z <= moments.x ? 1 : 0);
}

////////////////////
// vertex shaders //
////////////////////

void baseHair_vs(
			 in float4 iPos : POSITION,
			 in float3 iTan  : TANGENT,
			 in float2 iUV : TEXCOORD0,
			 out float4 oPos : POSITION,
			 out float oCol : COLOR0,
			 uniform float4x4 wvpMat,
			 uniform float hairRootWidth,
			 uniform float hairTipWidth,
			 uniform float3 viewDir)
{
	oPos = mul(wvpMat, iPos);
    float3 wvpTan = mul(wvpMat, float4(iTan, 0)).xyz;
   
    float3 perp = normalize(cross(wvpTan, viewDir));
    float width = lerp(hairRootWidth, hairTipWidth, iUV.x);    
    oPos.xyz = oPos.xyz + perp * width * iUV.y;
	oCol = 0;
}

void opacityMap_vs(  			
			in float4 iPos : POSITION0,
			in float3 iTan  : TANGENT,
			in float2 iUV : TEXCOORD0,
			out float4 oPos	: POSITION0,
			out float oDep : TEXCOORD0,
			uniform float hairRootWidth,
			uniform float hairTipWidth,
			uniform float3 viewDir,
			uniform float4 depthRange,
			uniform float4x4 wvpMat)
{
   oPos = mul(wvpMat, iPos);
   float3 wvpTan = mul(wvpMat, float4(iTan, 0)).xyz;

   float3 perp = normalize(cross(wvpTan, viewDir));
   float width = lerp(hairRootWidth, hairTipWidth, iUV.x);    
   oPos.xyz = oPos.xyz + perp * width * iUV.y;
   oDep = (oPos.z - depthRange.x) * depthRange.w;
}

void shadowHair_vs(
			   in float4 iPos : POSITION,
			   in float3 iTan  : TANGENT,
			   in float2 iUV : TEXCOORD0,
			   out float4 oPos : POSITION,
			   out float4 oWP : TEXCOORD0,
			   out float3 oSDir : TEXCOORD1,
			   out float4 oLP : TEXCOORD2,
			   out float3 oN : TEXCOORD3,
			   in float3 iN : NORMAL,

			   uniform float4x4 wMat,
			   uniform float4x4 wvpMat,
			   uniform float4x4 tvpMat,
			   uniform float4 spotDir,
			   uniform float4 depthRange,
			   uniform float hairRootWidth,
			   uniform float hairTipWidth,
			   uniform float3 viewDir)
{
    oWP = mul(wMat, iPos);
	oPos = mul(wvpMat, iPos);
	
	float3 wTan = mul(wMat, float4(iTan, 0)).xyz;
    float3 wvpTan = mul(wvpMat, float4(iTan, 0)).xyz;

    float3 wPerp = normalize(cross(wTan, viewDir));
    float3 perp = normalize(cross(wvpTan, viewDir));
    
	float widthTimesY = lerp(hairRootWidth, hairTipWidth, iUV.x) * iUV.y;
	oWP.xyz = oWP.xyz + wPerp * widthTimesY;
    oPos.xyz = oPos.xyz + perp * widthTimesY;

	oN = mul(wMat, float4(iN, 1)).xyz;

	oSDir = mul(wMat, spotDir).xyz;

	oLP = mul(tvpMat, oWP);
	oLP.z = (oLP.z - depthRange.x) * depthRange.w;
}


//////////////////////
// geometry shaders //
//////////////////////


//TRIANGLE
//TRIANGLE_OUT
//void hair_gs(AttribArray<float4> position : POSITION)
//{
//	for(int i=0; i<position.length; i++) {
//		emitVertex(float4(position[i].xyz, 1) : POSITION, float4(.5,.5,.5,1) : COLOR0);
//	}
//}


//////////////////////
// fragment shaders //
//////////////////////


void opacityMap_fs(
			   in float iDepth : TEXCOORD0,
			   out float4 oCol : COLOR0,
			   uniform float iterPass)
{
	//oCol.a = 1;
	if (iterPass == 0) {
		oCol.r = iDepth;
		oCol.a = 1;
	}
	else if (iterPass == 1)
		oCol.g = iDepth/10;
	else if (iterPass == 2)
		oCol.b = iDepth/10;
	else if (iterPass == 3)
		oCol.a = -iDepth/10;
}

void  shadowHair_fs(
				in float4 iWP : TEXCOORD0,
				in float3 iSDir : TEXCOORD1,		
				in float4 iLP : TEXCOORD2,
				in float3 iN : TEXCOORD3,
				out float3 oCol : COLOR,
				uniform float3 lightDif0,
				uniform float4 lightPos0,
				uniform float4 lightAtt0,
				uniform float4 invSMSize,
				uniform float4 spotlightParams,
				uniform float sampleRadius,
				uniform float blurSize,
				uniform float lightPower,
				uniform sampler2D shadowMap : TEXUNIT0)
{
	// direction
	half3 ld0 = normalize(lightPos0.xyz - (lightPos0.w * iWP.xyz));

	// attenuation
	half ila = length(lightPos0.xyz - iWP.xyz) / (lightAtt0.r);
	half la = 1.0 - ila * ila;  // quadratic falloff

	// calculate the spotlight effect
	half spot = dot(ld0, normalize(-iSDir)); // angle between spotlight dir and actual dir
	spot = saturate((spot - spotlightParams.y) / (spotlightParams.x - spotlightParams.y));
		
	// simple diffuse shading
	half3 LdotN0 = max(dot(ld0, normalize(iN)), 0);
	half3 light = la * spot * LdotN0;

	//if (light == 0) {
	//	oCol = 0;
	//}
	//else {
	//	oCol =
	//		lightDif0 * 
	//		light *
	//		lightPower *
	//		shadow(
	//		// pass in the shadow map
	//		shadowMap,
	//		// the calculated shadow position in the shadow map
	//		iLP,
	//		// radius to blur 
	//		sampleRadius,
	//		// inverse shadow map size so we know how much to move when blurring
	//		invSMSize.xy,
	//		// multiplier for blurring
	//		blurSize);
	//}
	oCol = LdotN0;
}
