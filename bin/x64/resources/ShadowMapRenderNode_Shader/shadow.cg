/*
-----------------------------------------------------------------------------
This source file is part of FRAPPER
research.animationsinstitut.de
sourceforge.net/projects/frapper

Copyright (c) 2008-2014 Filmakademie Baden-Wuerttemberg, Institute of Animation 

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; version 2.1 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
-----------------------------------------------------------------------------
*/

//#define LIGHTING


////////////////////
// add. functions //
////////////////////

half2 btex2D_rg(sampler2D map, float2 uv, half radius, half2 offset, half size) 
{
	// this is sometimes too slow and long
	// (3 * 2 + 1) ^ 2 =  7 ^ 2 = 49 samples
	const half2 o = offset * size;
	half2 sample = half2(0, 0);
	for (int x = -radius; x <= radius; x++) {
		for (int y = -radius; y <= radius; y++) {
			sample += tex2D(map, half2(uv.x + x * o.x, uv.y + y * o.y)).ra;
		}
	}
	return sample / ((radius * 2 + 1) * (radius * 2 + 1));

	// simple 3x3 filter
	//float2 o = offset * size;
	//float2 c = tex2D(map, uv.xy).rg; // center
	//c += tex2D(map, uv.xy - o.xy).rg; // top left
	//c += tex2D(map, uv.xy + o.xy).rg; // bottom right
	//c += tex2D(map, float2(uv.x - o.x, uv.y)).rg; // left
	//c += tex2D(map, float2(uv.x + o.x, uv.y)).rg; // right
	//c += tex2D(map, float2(uv.x, uv.y + o.y)).rg; // bottom
	//c += tex2D(map, float2(uv.x, uv.y - o.y)).rg; // top
	//c += tex2D(map, float2(uv.x - o.x, uv.y + o.y)).rg; // bottom left
	//c += tex2D(map, float2(uv.x + o.x, uv.y - o.y)).rg; // top right
	//return c / 9;
}

half shadow(sampler2D shadowMap, float4 shadowMapPos, half radius, float vsmEpsilon, half2 offset, half size) 
{
	const half2 suv = shadowMapPos.xy / shadowMapPos.w;

	// sharp texture read
	//float2 moments = tex2D(shadowMap, suv).rg;

	// blurred texture read
	const half2 moments = btex2D_rg(shadowMap, suv, radius, offset, size);

	const half litFactor = (shadowMapPos.z <= moments.x ? 1 : 0);

	// standard variance shadow mapping code
	//static const float vsmEpsilon = 0.0001;
	const half E_x2 = moments.y;
	const half Ex_2 = moments.x * moments.x;
	const half variance = min(max(E_x2 - Ex_2, 0.0) + vsmEpsilon, 1.0);
	const half m_d = moments.x - shadowMapPos.z;
	const half p = variance / (variance + m_d * m_d);

	return smoothstep(0.4, 1, max(litFactor, p));
}

////////////////////
// vertex shaders //
////////////////////


void base_vs(
			 in float4 iPos : POSITION,
			 out float4 oPos : POSITION,
			 out float oCol : COLOR0,
			 uniform float4x4 wvpMat)
{
	oPos = mul(wvpMat, iPos);
	oCol = 0;
}

void lightZ_vs(
			   in float4 iPos : POSITION,
			   out float4 oPos : POSITION,
			   out float oDepth : TEXCOORD0,
			   uniform float4x4 wvpMat,
			   uniform float4 depthRange)
{
	oPos = mul(wvpMat, iPos);
	oDepth = (oPos.z - depthRange.x) * depthRange.w;
}

void shadow_vs(
			   in float4 iPos : POSITION,
			   out float4 oPos : POSITION,
			   out float4 oWP : TEXCOORD0,
			   out float3 oSDir : TEXCOORD1,
			   out float4 oLP : TEXCOORD2,
#ifdef LIGHTING
			   out float3 oN : TEXCOORD3,
			   in float3 iN : NORMAL,
#endif
			   uniform float4x4 wMat,
			   uniform float4x4 wvpMat,
			   uniform float4x4 tvpMat,
			   uniform float4 spotDir,
			   uniform float4 depthRange)
{
	oWP = mul(wMat, iPos);
	oPos = mul(wvpMat, iPos);

#ifdef LIGHTING
	oN = mul(wMat, float4(iN, 0)).xyz;
#endif

	oSDir = mul(wMat, spotDir).xyz;
	oLP = mul(tvpMat, oWP);
	oLP.z = (oLP.z - depthRange.x) * depthRange.w;
}


//////////////////////
// fragment shaders //
//////////////////////


void lightZ_fs(
			   in float iDepth : TEXCOORD0,
			   out float4 oCol : COLOR0)
{
	oCol.ra = float2(iDepth, iDepth * iDepth);
}

void  shadow_fs(
				in float4 iWP : TEXCOORD0,
				in float3 iSDir : TEXCOORD1,		
				in float4 iLP : TEXCOORD2,
#ifdef LIGHTING
				in float3 iN : TEXCOORD3,
#endif
				out half oCol : COLOR,
				uniform float3 lightDif0,
				uniform float4 lightPos0,
				uniform float4 lightAtt0,
				uniform float4 invSMSize,
				uniform float4 spotlightParams,
				uniform float vsmEpsilon,
				uniform float sampleRadius,
				uniform float blurSize,
				uniform float lightPower,
				uniform sampler2D shadowMap : TEXUNIT0)
{

	// direction
	half3 ld0 = normalize(lightPos0.xyz - (lightPos0.w * iWP.xyz));

	// attenuation
	//float ila = length(lightPos0.xyz - iWP.xyz) / lightAtt0.r;
	half la = 1.0;// - ila * ila;  // quadratic falloff

	// calculate the spotlight effect
	half spot = dot(ld0, normalize(-iSDir)); // angle between spotlight dir and actual dir
	spot = saturate((spot - spotlightParams.y) / (spotlightParams.x - spotlightParams.y));

#ifdef LIGHTING			
	half LdotN0 = max(dot(ld0, normalize(iN)), 0).x;
	half light = la * spot * LdotN0;
#else
	half light = la * spot;		
#endif

	if (light == 0) {
		oCol = 0;
	}
	else {
		oCol =
			lightDif0.x * 
			light *
			lightPower *
			shadow(
			// pass in the shadow map
			shadowMap,
			// the calculated shadow position in the shadow map
			iLP,
			// radius to blur 
			sampleRadius,
			// vsm epilon
			vsmEpsilon/100,
			// inverse shadow map size so we know how much to move when blurring
			invSMSize.xy,
			// multiplier for blurring
			blurSize);
	}
}
