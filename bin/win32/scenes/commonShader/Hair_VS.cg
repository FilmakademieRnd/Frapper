void vs_main(  			
			//in
			float4 iPosition : POSITION0,
			float3 iNormal   : NORMAL0,
			float3 iTangent  : TANGENT,
			float2 iTexCoord : TEXCOORD0,
			//out
			out float4 oPosition	: POSITION0,
			out float3 oNormal		: TEXCOORD0,
			out float3 oTangent		: TEXCOORD1,
			out float3 oBinormal	: TEXCOORD2,
			out float2 oTexCoord	: TEXCOORD3,			
			out float3 oViewDir		: TEXCOORD4,
			out float3 oLightDir	: TEXCOORD5,			
			//parameter
			uniform float hairRootWidth,
			uniform float hairTipWidth,
			uniform float3 fvLightPosition,
			uniform float4x4 worldViewProj,
			uniform float4x4 view_matrix,
			uniform float3 eyePosition,
			uniform float3 viewDirView)
			
{
   oNormal   = mul(worldViewProj, float4(iNormal, 0));   
   oTangent  = mul(worldViewProj, float4(iTangent, 0));
   oBinormal = cross(oNormal, oTangent);

   float TexCoordX   = iTexCoord.x;
   float TexCoordY   = iTexCoord.y;

   float4 temp_pos = mul(worldViewProj, iPosition);
   float3 perp = normalize(cross(oTangent, viewDirView));
   float width = lerp(hairRootWidth, hairTipWidth, TexCoordX);    
   oPosition = temp_pos;
   oPosition.xyz = temp_pos + perp * width * TexCoordY;
  
   TexCoordX   += 0.01;
   oTexCoord.x       = TexCoordX;
   oTexCoord.y       = TexCoordY;

   oViewDir = normalize(eyePosition - oPosition); 
   oLightDir = mul(view_matrix, float4(normalize(fvLightPosition - oPosition) ,0));
}



void vs_main_HW3b(  			
			//in
			float4 iPosition : POSITION,
			float3 iNormal   : NORMAL,
			float3 iTangent  : TANGENT,			
			float2 iTexCoord : TEXCOORD0,
			float4 blendIdx : BLENDINDICES,
			float4 blendWgt : BLENDWEIGHT,
			//out
			out float4 oPosition	: POSITION,
			out float3 oNormal		: TEXCOORD0,
			out float3 oTangent		: TEXCOORD1,
			out float3 oBinormal	: TEXCOORD2,
			out float2 oTexCoord	: TEXCOORD3,			
			out float3 oViewDir		: TEXCOORD4,
			out float3 oLightDir	: TEXCOORD5,			
			//parameter
			uniform float3x4   worldMatrix3x4Array[4],
			uniform float4x4 viewProjectionMatrix,
			uniform float hairRootWidth,
			uniform float hairTipWidth,
			uniform float3 fvLightPosition,			
			uniform float4x4 viewMatrix,
			uniform float3 eyePosition,
			uniform float3 viewDirView)
			
{
	float4 blendPos = float4(0,0,0,0);
	float3 blendNormal = float3(0,0,0);
	float3 blendTangent = float3(0,0,0);		
	for (int i = 0; i < 3; ++i)
	{
		blendPos += float4(mul(worldMatrix3x4Array[blendIdx[i]], iPosition).xyz, 1.0) * blendWgt[i];		
		blendNormal += mul(worldMatrix3x4Array[blendIdx[i]], float4(iNormal, 0.0)) * blendWgt[i];		
		blendTangent += mul(worldMatrix3x4Array[blendIdx[i]], float4(iTangent, 0.0)) * blendWgt[i];		
	}
	
	float4 wvpPosition = mul(viewProjectionMatrix, blendPos);

	// new vh
	oNormal = mul((float3x3)viewMatrix, blendNormal);
	oTangent = mul((float3x3)viewMatrix, blendTangent);
    oBinormal = cross(oNormal, oTangent);

	
	const float3 vVec = normalize(blendPos.xyz - eyePosition) * 10.0;
	oViewDir = mul((float3x3)viewMatrix, vVec); 
	// new vh
	
	// oNormal = mul(viewProjectionMatrix, float4(blendNormal, 0.0));
	// oTangent = mul(viewProjectionMatrix, float4(blendTangent, 0.0));
    // oBinormal = cross(oNormal, oTangent);

   float3 perp = normalize(cross(oTangent, viewDirView));   
   float width = lerp(hairRootWidth, hairTipWidth, iTexCoord.x);    
   oPosition = wvpPosition;
   oPosition.xyz = wvpPosition.xyz + perp * width * iTexCoord.y;

   // investigate!
   oTexCoord.x = iTexCoord.x + 0.01;
   // oViewDir = normalize(eyePosition - oPosition); 
   oLightDir = mul(viewMatrix, float4(normalize(fvLightPosition - oPosition) ,0));
}


void vs_main_HW1b(     
   //in
   float4 iPosition : POSITION,
   float3 iNormal   : NORMAL,
   float3 iTangent  : TANGENT,   
   float2 iTexCoord : TEXCOORD0,
   float4 blendIdx : BLENDINDICES,
   float4 blendWgt : BLENDWEIGHT,
   //out
   out float4 oPosition : POSITION,
   out float3 oNormal  : TEXCOORD0,
   out float3 oTangent  : TEXCOORD1,
   out float3 oBinormal : TEXCOORD2,
   out float2 oTexCoord : TEXCOORD3,   
   out float3 oViewDir  : TEXCOORD4,
   out float3 oLightDir : TEXCOORD5,   
   //parameter
   uniform float3x4   worldMatrix3x4Array[1],
   uniform float4x4 viewProjectionMatrix,
   uniform float hairRootWidth,
   uniform float hairTipWidth,
   uniform float3 fvLightPosition,   
   uniform float4x4 view_matrix,
   uniform float3 eyePosition,
   uniform float3 viewDirView)
{
	float4 blendPos = float4(mul(worldMatrix3x4Array[blendIdx[0]], iPosition).xyz, 1.0) * blendWgt[0];  
	float3 blendNormal = mul(worldMatrix3x4Array[blendIdx[0]], float4(iNormal, 0.0)) * blendWgt[0];  
	float3 blendTangent = mul(worldMatrix3x4Array[blendIdx[0]], float4(iTangent, 0.0)) * blendWgt[0];  

	oPosition = mul(viewProjectionMatrix, blendPos);

	//oNormal = mul(viewProjectionMatrix, float4(blendNormal, 0.0));
	oTangent = mul(viewProjectionMatrix, float4(blendTangent, 0.0));
	oBinormal = cross(oNormal, oTangent);

	float3 perp = normalize(cross(oTangent, viewDirView));
	float3 wPerp = normalize(cross(blendTangent, viewDirView));
	float width = lerp(hairRootWidth, hairTipWidth, iTexCoord.x);    
	oPosition.xyz += perp * width * iTexCoord.y;
	blendPos.xyz += wPerp * width * iTexCoord.y;

	oNormal = blendNormal;
	oTangent = blendTangent;

	//oTexCoord.x = iTexCoord.x + 0.01;
	oViewDir = normalize(eyePosition - oPosition); 
	oLightDir = float4(normalize(fvLightPosition - blendPos), 0);
}
