/*
-----------------------------------------------------------------------------
This source file is part of FRAPPER
research.animationsinstitut.de
sourceforge.net/projects/frapper

Copyright (c) 2008-2016 Filmakademie Baden-Wuerttemberg, Institute of Animation 

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; version 2.1 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt.
-----------------------------------------------------------------------------
*/

//!
//! \file "RenderNode.h"
//! \brief Header file for RenderNode class.
//!
//! \author     Stefan Habel <stefan.habel@filmakademie.de>
//! \author     Nils Zweiling <nils.zweiling@filmakademie.de>
//! \author     Simon Spielmann <sspielma@filmakademie.de>
//! \version    1.3
//! \date       22.03.2014 (last updated)
//!

#ifndef RENDERNODE_H
#define RENDERNODE_H

#include "ImageNode.h"

// OGRE
#include <Ogre.h>
#include "OgreTools.h"
#if (OGRE_PLATFORM  == OGRE_PLATFORM_WIN32)
#include <windows.h>
#endif

namespace Frapper {

//!
//! Base class for all render nodes.
//!
class FRAPPER_CORE_EXPORT RenderNode : public ViewNode
{

    Q_OBJECT

protected: // static constants

    //!
    //! The name of the background color parameter.
    //!
    static const QString BackgroundColorParameterName;

    //!
    //! The default render width.
    //!
    static const int DefaultRenderWidth = 1200;

    //!
    //! The default render height.
    //!
    static const int DefaultRenderHeight = 720;

    //!
    //! The default gamma.
    //!
    static float DefaultGamma;

    //!
    //! The default resolution multiplier literals.
    //!
    static QStringList resLiterals;

    //!
    //! The default resolution multiplier values.
    //!
    static QStringList resValues;


public: // constructors and destructors

    //!
    //! Constructor of the RenderNode class.
    //!
    //! \param name The name for the new node.
    //! \param parameterRoot A copy of the parameter tree specific for the type of the node.
    //!
    RenderNode ( const QString &name, ParameterGroup *parameterRoot );

    //!
    //! Destructor of the RenderNode class.
    //!
    //! Defined virtual to guarantee that the destructor of a derived class
    //! will be called if the instance of the derived class is saved in a
    //! variable of its parent class type.
    //!
    virtual ~RenderNode ();

public: // methods

	//!
    //! Returns the image that is generated by this node.
    //!
    //! \return The image that is generated by this node.
    //!
    virtual Ogre::TexturePtr getImage ();

	//!
    //! Updates the image that is generated by this node.
    //!
    virtual void updateImage () const;

    //!
    //! Returns the width of the render target.
    //!
    //! \return The width of the render target.
    //!
    unsigned int getWidth() const;

    //!
    //! Returns the height of the render target.
    //!
    //! \return The height of the render target.
    //!
    unsigned int getHeight() const; 

public slots: //

        //!
        //! Redraw of ogre scene has been triggered.
        //!
        virtual void redrawTriggered ();

        //!
        //! Set the multiplier for the render targets.
		//!
		void setTargetMultiplier();

		//!
		//! Force to rebuild the render target. 
		//! 
		virtual void rebuildRendertargets ();

protected: // enums

	//!
	//! Nested enumeration for the different types of pins to represent
	//! parameters.
	//!
	enum ShaderType {
		SH_Vert = 0,
		SH_Frag,
		SH_Geo
	};


protected: // methods

	//!
	//! Generates a Ogre RenderTexture by using the createManual(...) function.
	//!
	//! \return The unique name of the new render texture.
    //!
    Ogre::String generateTexture(const QString &name, Ogre::TextureType texType, Ogre::uint width, Ogre::uint height, int num_mips, Ogre::PixelFormat format, int usage=Ogre::TU_DEFAULT);

    //!
    //! Create a viewport for all RenderTextures (RenderTargets) in m_textureHash.
    //!
    //!	\param cam Camera to create a Ogre::Viewport.
    //!	
    void initializeRenderTarget(Ogre::Camera* cam, Ogre::ColourValue bkColor = Ogre::ColourValue(0,0,0), Ogre::PixelFormat format = Ogre::PF_R8G8B8, bool clearFrame = true, int fsaa = 4);

    //!
    //! Create a viewport for all RenderTextures (RenderTargets) in m_textureHash.
    //!
    //!	\param cam Camera to create a Ogre::Viewport.
    //!	
    void initializeRenderTargetsInHash (Ogre::Camera* cam = 0, bool clearFrame = true);

    //!
    //!	Initializes all textures
    //!
    //!	\param cam The scene cam for the new render target.
    //!
    void initializeAllTargets(Ogre::Camera* cam);

    //!
    //!	Resizes all textures
    //!
    //!	\param width The width of new render texture.
    //!	\param height The height of new render texture.
    //!
    void resizeAllTargets(int width, int height);

    //!
    //!	Resizes all textures in m_textureHash.
    //!
    //!	\param width The width of new render texture.
    //!	\param height The height of new render texture.
    //!
    void resizeAllTexturesInHash(int width, int height);

    //!
    //!	Resizes the main render texture (m_renderTexture).
    //!
    //!	\param width The width of render texture.
    //!	\param height The height of render texture.
    //!
    void resizeRenderTexture(int width, int height, Ogre::PixelFormat pixelFormat = Ogre::PF_R8G8B8, int fsaa = 4);

    //!
    //! Clean up all textures
    //!
    void finalizeRenderTargets();

    //!
    //! Clean up the render texture
    //!
    void removeRenderTexture(Ogre::TexturePtr &texture);

	//!
	//! Get shader parameters.
	//!
	//! \param mat The material.
	//! \param type The specific shader stage.
	//! \param tecId The id for the technique.
	//! \param passId The id for the pass.
	//!
	const Ogre::GpuProgramParametersSharedPtr getShaderParameters( Ogre::MaterialPtr &material, const ShaderType type = SH_Frag, const unsigned short tecId = 0, const unsigned short passId = 0 ) const;

    //!
    //! Assign texture to texture slot.
    //!
    //! \param mat The material.
    //! \param slot The texture slot id.
    //!
	void setTexture( const Ogre::MaterialPtr &mat, const Ogre::TexturePtr &texture, const unsigned int slot ) const;

	//!
    //! Set integer shader parameter.
    //!
    //! \param fpParames The shader parameters.
    //! \param name Name of the parameter.
    //! \param value Integer value of the parameter.
    //!
	template <typename T>
    inline void setShaderParameter( const Ogre::GpuProgramParametersSharedPtr &shaderParams, const Ogre::String &name, const T &value ) const
	{
	    if (shaderParams->_findNamedConstantDefinition(name))
			shaderParams->setNamedConstant(name, value);
    }

	//!
    //! Creates a unique name from the given object name by adding the Node
    //! number.
    //!
    virtual const Ogre::String createUniqueName ( const QString &objectName );


protected: // data

	//!
    //! The ID to create unique target Id's.
    //!
    int m_currentId;

    //!
    //! The width of the image to render.
    //!
    int m_renderWidth;

    //!
    //! The height of the image to render.
    //!
    int m_renderHeight;

    //!
    //! The multiplier for the render target size.
    //!
    float m_targetMultiplier;

	//!
	//! ...
	//!
	Ogre::PixelFormat m_pixelFormat;
	
	//!
	//! ...
	//!
	int m_fsaa;

    //!
    //! The default texture.
    //!
    Ogre::TexturePtr m_defaultTexture;

    //!
    //! The Pointer to the Parameter containing the main render target
    //!
    Parameter *m_outputParameter;

    //!
    //! The scene manager for building the scene to render.
    //!
    Ogre::SceneManager *m_sceneManager;

    //!
    //! The viewport.
    //!
    Ogre::Viewport *m_viewport;

    //!
    //! The renderer's own camera.
    //!
    Ogre::Camera *m_camera;

    //!
    //! The renderer's render texture.
    //!
    Ogre::TexturePtr m_renderTexture;

	//!
    //! The name of the image output parameter.
    //!
    QString m_outputImageName;

    //!
    //! The render texture name.
    //!
    Ogre::String m_renderTextureName;

    //! 
    //! Qt map of Ogre textures.
    //!
    QHash<QString, Ogre::TexturePtr> m_textureHash;

    //! 
    //! Qt hash of Ogre viewports.
    //!
    QHash<QString, Ogre::Viewport*> m_viewportHash;

	//! 
    //! Qt hash of output parameter names.
    //!
	QList<QString> m_outParameterNameList;
};

} // end namespace Frapper

#endif
